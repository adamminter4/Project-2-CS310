menzies.us/cs310/cs310_20.html#Project2
http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node153.html

"What mappend should do:

(mappend #'cdr '((1 2 3) (4 5 6)))

(2 3 5 6)"

NOTES:
I want to create my generate and generates function before I start trying to devise a way of writing my deftests.
I guess it makes sense ^_^

So, this is what I'm going to do:
  1.) Write a genSchedule function that formats the output from the get go. Something similiar to this:
      
      Year1
        Required Classes    
          Blah
          Class
          Blahh
          wut
          brony
          the internet
       GECs
          Poop
          Fart
          Bro
          Awesome
          Terrible
          Fishing
      Year2
        Required Classes
          You
          Get
          The point.

So how will I do this? Welp, it's just theory at the moment, but this is what I presume I can do.
    1.)For starters, I'm going to carry around a Hash Table, acting as a cache of all the GECs random-elt
       picks up. This is going to make it so there aren't any repeats in the course plan of GECs, because as
       stands, my grammar file does this.
    2.)Using this hash table, I'll simply compare the random element returned to the current attributes of the
       hash. If it's there, back trace and try again.
    3.)Before I get into formatting, I think I'll first add everything to one of 3 hash tables, which represent
       each year. I'll do this by checking non-terminals for year and year number. This way, when I go to print
       the results, I can just simply call the inital Year hash table, print it out, and since the GEC hash table
       will be in there, I'll print those under their own category. This shouldn't be too hard. I'll add every 
       required class to the Year hash table, then add the GEC hash table before I get to Year2. Maybe push it on
       the hash and reverse it? Still not that familiar with any hash table functions, but I'm sure I'll figure it
       out.

  2.) Write my own rewrite?
    - Not sure if I'll need or have to do this, but I'm adding it here so I don't forget.

  3.)Write my own generate-prim to test the grammar with a deftest.
    - I need to read what reset-seed does. I'm uncertain, but I believe it defaults it back to the first seed.
      What this may tell me is that I'm testing the output of the default seed with a list that mirrors what the
      reset-seed output looks like. 
    -Still unsure how to approach this.

  4.) Write the 6 other deftests (lol)
  5.) Finish 2a. (MOAR LAWL. I need to stop procrastinating.)
  

2b)
One student pointed out that by default, the "symbol-name" function
will set the case of all letters to the same, which prevents you from
properly checking if the first letter of a symbol was lower-cased, as
the instruction initially said.

Therefore, I have changed the instruction so that you want your
terminal-p function to check if the first letter of the symbol is "!".
In order for this to work, however, you will need to edit your
scifi.txt file so that all terminals start with "!". (just simply put
an exclamation point--without quotes around it--in front of all
terminal symbols manually, that is those that start with lower case
letters in the text file).

Let me know if you need any clarification on that.

(By the by, if you figure out how to get it working without using
exclamation points, go ahead and stick with that solution).